@startuml
class fr.unice.polytech.citadelle.characters_class.Bishop {
+ <<Create>> Bishop()
+ void spellOfTurn(Behaviour,LinkedHashMap<Character,Optional<Behaviour>>)
}
class fr.unice.polytech.citadelle.game.Board {
- ArrayList<Player> listOfPlayer
- DeckDistrict deckDistrict
- DeckCharacter deckCharacter
- int roundNumber
- ArrayList<Character> listOfCharacter
+ <<Create>> Board(ArrayList<Player>,ArrayList<Character>,DeckDistrict,DeckCharacter)
+ <<Create>> Board()
+ ArrayList<Player> getListOfPlayer()
+ DeckDistrict getDeckDistrict()
+ DeckCharacter getDeckCharacter()
+ void setListOfPlayer(ArrayList<Player>)
+ void incrementRoundNumber()
+ int getRoundNumber()
+ ArrayList<Character> getListOfCharacter()
}
class fr.unice.polytech.citadelle.game_interactor.Strategy {
~ Player player
~ Board board
~ Predict predict
~ int numberOfCharacter
+ <<Create>> Strategy(int,Board,Player)
+ int randomInt(int)
+ Character chooseCharacterForThiefRandom(LinkedHashMap<Character,Optional<Behaviour>>)
+ Character chooseCharacterForAssassinRandom(LinkedHashMap<Character,Optional<Behaviour>>)
+ Character chooseCharacterForMagicianRandom(LinkedHashMap<Character,Optional<Behaviour>>)
+ Character chooseCharacterForAssassinAdvanced()
+ Player findThePlayerWithClosestScoreAssassin()
+ int cityDistrictScore(Player)
+ int playerPredictScore(Player)
+ boolean hasFiveDistrictColors(Player)
}
class fr.unice.polytech.citadelle.game_engine.Referee {
+ {static} int BONUS_FIRST
+ {static} int BONUS_END
- Board board
+ <<Create>> Referee(Board)
+ void updatePlayerWithCityScore(Player)
+ void addBonusForPlayers(ArrayList<Behaviour>)
+ int cityDistrictScore(Player)
+ boolean hasFiveDistrictColors(Player)
+ void getWinner()
- ArrayList<BonusDistrict> isThereBonusDistrictInCity(Player)
- void activateBonus(Player,ArrayList<BonusDistrict>)
+ ArrayList<HauntedCity> isThereHauntedCityJokerInCity(Player)
+ void activateHauntedCityJoker(Player,ArrayList<HauntedCity>)
+ boolean CityIsComplete(Player)
}
class fr.unice.polytech.citadelle.game_engine.RoundManager {
- ArrayList<Behaviour> listOfBehaviour
- ArrayList<Character> listOfAllCharacters
- LinkedHashMap<Character,Optional<Behaviour>> hashOfCharacters
- Board board
- Referee referee
- String currentPhase
+ <<Create>> RoundManager(ArrayList<Character>,ArrayList<Behaviour>,LinkedHashMap<Character,Optional<Behaviour>>,Board)
+ ArrayList<Behaviour> runRounds(PhaseManager)
+ ArrayList<City> getTheListOfCity(ArrayList<Player>)
+ void setupCharacters()
+ void chooseACharacterCard(Behaviour,DeckCharacter)
+ Character chooseCharacter(Behaviour,DeckCharacter)
+ int isThereAFamily(Behaviour)
+ ArrayList<Behaviour> askEachCharacterToPlay(PhaseManager)
+ void actionOfBehaviour(Behaviour)
+ void cityVerification(Behaviour,ArrayList<Behaviour>)
+ void updateLeaderboard(Behaviour,ArrayList<Behaviour>)
+ void updateListOfBehaviour()
+ int findKing(ArrayList<Behaviour>)
+ ArrayList<Behaviour> orderListOfPlayer(ArrayList<Behaviour>,int)
+ void reviveAll()
+ ArrayList<Player> getListOfPlayers()
+ ArrayList<Behaviour> getListOfBehaviour()
+ ArrayList<Character> getListOfAllCharacters()
+ LinkedHashMap<Character,Optional<Behaviour>> getHashOfCharacters()
+ Board getBoard()
}
class fr.unice.polytech.citadelle.game.ColorDistrict {
+ <<Create>> ColorDistrict(String,int,String,String)
+ void hauntedCitySpell(Player)
+ void schoolOfMagicSpell(Player)
}
class fr.unice.polytech.citadelle.game.Character {
~ String name
~ int value
~ boolean characterIsAlive
+ <<Create>> Character(String,int)
+ String getName()
+ int getValue()
+ int collectGold(Behaviour,String)
+ void spellOfTurn(Behaviour,LinkedHashMap<Character,Optional<Behaviour>>)
+ void setCharacterIsAlive(boolean)
+ boolean isCharacterIsAlive()
+ boolean equals(Object)
+ String toString()
# void spellOfTurnDistrictFamily(Behaviour,String,String)
}
class fr.unice.polytech.citadelle.game_engine.PhaseManager {
+ {static} String MID_GAME_PHASE
+ {static} String END_GAME_PHASE
+ {static} String LAST_TURN_PHASE
+ <<Create>> PhaseManager()
+ String analyseGame(ArrayList<City>)
- boolean isLastTurnPhase(ArrayList<City>)
- boolean isEndGamePhase(ArrayList<City>)
}
class fr.unice.polytech.citadelle.game.Player {
- String name
- Character character
- ArrayList<District> districtCards
- City city
- int score
- int rank
+ int golds
+ <<Create>> Player(String)
+ void addDistrict(District)
+ void chooseCharacterCard(Character)
+ void buildDistrict(District)
+ void updateScore(int)
+ boolean hasDistrict(District)
+ int getDistrictCardsSize()
+ int getGolds()
+ ArrayList<District> getDistrictCards()
+ Character getCharacter()
+ int getCharacterValue()
+ String getName()
+ int getScore()
+ int getRank()
+ void addGold()
+ void addOneGold()
+ void setRank(int)
+ void setRole(Character)
+ String toString()
+ int compareTo(Player)
+ void setGolds(int)
+ City getCity()
+ int stealGoldOfThePlayer(Player)
}
class fr.unice.polytech.citadelle.game.purple_districts.Library {
+ <<Create>> Library(String,int,String,String)
}
class fr.unice.polytech.citadelle.characters_class.King {
+ <<Create>> King()
+ void spellOfTurn(Behaviour,LinkedHashMap<Character,Optional<Behaviour>>)
}
class fr.unice.polytech.citadelle.game.District {
- String name
- int value
- String color
- String nameOfFamily
+ <<Create>> District(String,int,String,String)
+ String getName()
+ int getValue()
+ boolean equals(Object)
+ boolean isA(String)
+ String getColor()
+ String getNameOfFamily()
+ void setColor(String)
+ String toString()
+ int compareTo(District)
}
class fr.unice.polytech.citadelle.game.DeckDistrict {
- ArrayList<District> deckDistrict
+ <<Create>> DeckDistrict()
+ void initialise()
- void oneCard()
- void doubleCards()
- void tripleCards()
- void quadraCards()
- void pentaCards()
+ int getSize()
+ ArrayList<District> getDeckDistrict()
+ void addDistrict(District)
+ void removeDistrict(District)
+ District blindPick()
}
class fr.unice.polytech.citadelle.output.PrintCitadels {
+ {static} void startCitadelles()
+ {static} void printRolePhase()
+ {static} String stringColoredGold(int)
+ {static} void playerStartTurn(Character,Player)
+ {static} void chooseRole(Player,Character)
+ {static} void chooseDistrict(Player,District)
+ {static} void printRanking(ArrayList<Player>)
+ {static} void dropALine()
+ {static} void printFirstPlayerToComplete(Player)
+ {static} void printPlayerToCompleteCity(Player)
+ {static} void printFitLayer()
+ {static} void printLayer()
+ {static} void printKingSpell(Player)
+ {static} void printTakeGold(Player)
+ {static} void printTakeDistrictCard(Player,District)
+ {static} void printBuildDistrict(Player,District)
+ {static} void printBoard(Board)
+ {static} void printBoardOfPlayer(Player)
+ {static} void printNumberRound(int)
+ {static} void botIsDead(Player)
+ {static} void killCharacter(Character)
+ {static} void printPhase(String,Player)
+ {static} void stealCharacter(Character,int)
+ {static} void failedToStealCharacter(Character)
+ {static} void printCharacterEarnedMoney(int,String,String)
+ {static} void printCharacterEarnedNoMoney(String,String)
+ {static} Attribute getDistrictColor(District)
+ {static} void printDistrictWithColor(Player)
+ {static} void printArchitectSpell()
+ {static} void printMagicianSpellSwapHands(Character)
+ {static} void printMagicianSpellSwapCards(ArrayList<District>)
+ {static} void printMagicianSpellFailed(Character)
+ {static} void printAddCardToTheDeck(Player,District)
+ {static} void printPutCardBackToTheDeck(Player,District)
+ {static} void printMerchantEarnedStartRoundMoney()
+ {static} void printShuffle(String)
+ {static} void printBurned(Character)
+ {static} void printAssassinAdvancedChoice(Player,int,int)
+ {static} void printHidCharacter(Character)
}
class fr.unice.polytech.citadelle.game.purple_districts.DragonGate {
+ <<Create>> DragonGate(String,int,String,String)
}
class fr.unice.polytech.citadelle.game_interactor.CityManagement {
~ Player player
+ <<Create>> CityManagement(Player)
+ ArrayList<District> getBuildableDistrictWithTwoMoreGold()
+ ArrayList<District> listOfDistrictBuildable()
+ ArrayList<District> districtWeCanBuild(ArrayList<District>)
+ ArrayList<District> districtWeHaveEnoughMoneyToBuild(int)
+ boolean isAlreadyBuilt(String)
}
class fr.unice.polytech.citadelle.game.BonusDistrict {
+ <<Create>> BonusDistrict(String,int,String,String)
+ void bonusDistrict(Player)
}
class fr.unice.polytech.citadelle.game.purple_districts.University {
+ <<Create>> University(String,int,String,String)
}
class fr.unice.polytech.citadelle.game_engine.Controller {
- RoundManager roundManager
- PhaseManager phaseManager
- Referee referee
+ <<Create>> Controller()
+ void initGame()
+ void runGame()
+ void end(ArrayList<Behaviour>)
}
class fr.unice.polytech.citadelle.characters_class.Warlord {
+ <<Create>> Warlord()
}
class fr.unice.polytech.citadelle.characters_class.Thief {
+ <<Create>> Thief()
+ void spellOfTurn(Behaviour,LinkedHashMap<Character,Optional<Behaviour>>)
}
class fr.unice.polytech.citadelle.game.purple_districts.Graveyard {
+ <<Create>> Graveyard(String,int,String,String)
}
class fr.unice.polytech.citadelle.characters_class.Assassin {
+ <<Create>> Assassin()
+ void spellOfTurn(Behaviour,LinkedHashMap<Character,Optional<Behaviour>>)
}
class fr.unice.polytech.citadelle.game_interactor.Predict {
~ Board board
+ <<Create>> Predict()
~ Character predictWhoIsPlayer(Player,ArrayList<String>)
~ ArrayList<String> allCharacters()
- ArrayList<String> targetableCharactersForPredictWhoIsPlayer(Player,ArrayList<String>)
- int goldsForPredictWhoIsPlayer(Player)
- ArrayList<District> handForPredictWhoIsPlayer(Player)
- ArrayList<District> cityForPredictWhoIsPlayer(Player)
- ArrayList<Player> playersForPredictWhoIsPlayer(Player)
- boolean canBeArchitect(Player,ArrayList<String>)
- boolean canBeBishop(Player,ArrayList<String>)
- boolean canBeKing(Player,ArrayList<String>)
}
class fr.unice.polytech.citadelle.game_interactor.Executor {
~ Player player
+ <<Create>> Executor(Player)
+ void takeCard(District,DeckDistrict)
+ void buildDistrict(District)
+ void takeGold()
+ void putCardBackInDeck(DeckDistrict,District)
+ District pickCard(DeckDistrict)
+ ArrayList<District> pickCards(DeckDistrict)
+ District pickBlindDistrict(DeckDistrict)
+ void addDistrict(District)
}
class fr.unice.polytech.citadelle.game.SpellDistrict {
+ <<Create>> SpellDistrict(String,int,String,String)
+ void librarySpell(Player,DeckDistrict)
}
class fr.unice.polytech.citadelle.game_interactor.NormalBot {
+ <<Create>> NormalBot(Player,Board)
+ void executeSpell(ArrayList<SpellDistrict>,DeckDistrict)
+ void normalBehaviour()
+ void endGameBehaviour()
+ void lastTurnBehaviour()
+ District chooseBetweenTwoCards(District,District)
}
class fr.unice.polytech.citadelle.game_engine.Initializer {
+ {static} int ASSASSIN_INDEX
+ {static} int THIEF_INDEX
+ {static} int MAGICIAN_INDEX
+ {static} int KING_INDEX
+ {static} int BISHOP_INDEX
+ {static} int MERCHANT_INDEX
+ {static} int ARCHITECT_INDEX
+ {static} int WARLORD_INDEX
+ {static} int NUMBER_OF_PLAYER
+ {static} void resetHashOfCharacter(LinkedHashMap<Character,Optional<Behaviour>>,ArrayList<Character>)
+ {static} ArrayList<Character> createListOfAllCharacter()
+ {static} ArrayList<Behaviour> createListOfBehaviour(Board)
+ {static} Board createBoard()
+ {static} void fillHashOfCharacter(HashMap<Character,Optional<Behaviour>>,Character,Behaviour)
+ {static} void initDeckDistrict(DeckDistrict)
+ {static} void initDeckCharacter(DeckCharacter,ArrayList<Character>)
+ {static} void initPlayerCards(Board)
}
class fr.unice.polytech.citadelle.game.DeckCharacter {
- ArrayList<Character> deckOfCharacters
- ArrayList<Character> burnedAndVisibleCharacters
- Character hiddenCard
- int nbPlayers
+ <<Create>> DeckCharacter()
+ <<Create>> DeckCharacter(int)
+ Character chooseRandomCharacter()
+ ArrayList<Character> getDeckCharacter()
+ Character getHiddenCard()
+ ArrayList<Character> getBurnedAndVisibleCharacters()
+ int getSize()
+ void shuffleDeck()
+ int calculateNbCardToBurn()
+ void burnCharacters()
+ Character removeKingFromDeck()
+ void checkAndUpdateDeckForLastPlayer()
+ boolean canPickTheHiddenCard()
+ void hideCard()
+ void deckStartRound()
}
class fr.unice.polytech.citadelle.game.purple_districts.Laboratory {
+ <<Create>> Laboratory(String,int,String,String)
}
class fr.unice.polytech.citadelle.characters_class.Architect {
+ <<Create>> Architect()
+ void spellOfTurn(Behaviour,LinkedHashMap<Character,Optional<Behaviour>>)
}
class fr.unice.polytech.citadelle.game.purple_districts.Smithy {
+ <<Create>> Smithy(String,int,String,String)
}
class fr.unice.polytech.citadelle.game.purple_districts.Observatory {
+ <<Create>> Observatory(String,int,String,String)
}
class fr.unice.polytech.citadelle.game_interactor.Behaviour {
# Player player
# int numberOfCharacter
~ Strategy strategy
~ CityManagement cityMan
~ Executor executor
~ Board board
# {static} int ZERO_CARD
# {static} int ONE_CARD
# {static} int TWO_CARD
+ <<Create>> Behaviour(Player,Board)
+ District selectTheHigherDistrict(ArrayList<District>)
+ District selectTheLowerDistrict(ArrayList<District>)
+ void play(String,LinkedHashMap<Character,Optional<Behaviour>>)
+ void buildArchitect()
+ void normalBehaviour()
+ void endGameBehaviour()
+ void lastTurnBehaviour()
+ Character selectCharacterForSpell(LinkedHashMap<Character,Optional<Behaviour>>)
- Character chooseCharacterForMagicianRandom(LinkedHashMap<Character,Optional<Behaviour>>)
- Character chooseCharacterForAssassinRandom(LinkedHashMap<Character,Optional<Behaviour>>)
- Character chooseCharacterForThiefRandom(LinkedHashMap<Character,Optional<Behaviour>>)
+ void ifPossibleBuildADistrict()
+ ArrayList<District> pick2CardsIntoTheDeck()
+ ArrayList<District> chooseToKeepOrNotPickedCards(ArrayList<District>)
+ void takeCard(District)
+ void takeGold()
+ void addDistrict(District)
+ void buildDistrict(District)
+ District pickCard()
+ District pickCardsInDeck()
~ void removeOtherCard(ArrayList<District>,District)
+ District chooseBetweenTwoCards(District,District)
+ int randomInt(int)
+ void setCharacterIsAlive(Boolean)
+ Player getPlayer()
+ Boolean getBehaviourIsKing()
+ CityManagement getCityManager()
+ Executor getExecutor()
+ ArrayList<Integer> chooseMagicianAction()
}
class fr.unice.polytech.citadelle.characters_class.Merchant {
+ <<Create>> Merchant()
+ void spellOfTurn(Behaviour,LinkedHashMap<Character,Optional<Behaviour>>)
}
class fr.unice.polytech.citadelle.game.purple_districts.HauntedCity {
- int roundBuilt
+ <<Create>> HauntedCity(String,int,String,String,Integer)
+ int getRoundBuilt()
+ void setRoundBuilt(Integer)
}
class fr.unice.polytech.citadelle.characters_class.Magician {
+ <<Create>> Magician()
+ void swapCardsWithBot(Behaviour,Behaviour)
+ ArrayList<District> swapCardsWithDeck(Behaviour,ArrayList<Integer>)
+ void spellOfTurn(Behaviour,LinkedHashMap<Character,Optional<Behaviour>>)
}
class fr.unice.polytech.citadelle.Main {
+ {static} void main(String)
}
class fr.unice.polytech.citadelle.game.purple_districts.SchoolOfMagic {
+ <<Create>> SchoolOfMagic(String,int,String,String)
}
class fr.unice.polytech.citadelle.game.City {
+ ArrayList<District> builtDistrict
- int cityComplete
+ <<Create>> City()
+ int getSizeOfCity()
+ void buildDistrict(District)
+ boolean isComplete()
+ ArrayList<District> getBuiltDistrict()
+ String toString()
}
class fr.unice.polytech.citadelle.game_interactor.RushBot {
- {static} int MAX_VALUES_OF_CARDS
+ <<Create>> RushBot(Player,Board)
+ void executeSpell(ArrayList<SpellDistrict>,DeckDistrict)
+ void normalBehaviour()
+ void endGameBehaviour()
+ void lastTurnBehaviour()
+ void ifPossibleBuildACheapDistrict()
+ District getCheaperDistrict(ArrayList<District>)
- ArrayList<District> getAllCheapersDistricts(ArrayList<District>)
+ District chooseBetweenTwoCards(District,District)
}
class fr.unice.polytech.citadelle.game.purple_districts.Keep {
+ <<Create>> Keep(String,int,String,String)
}


fr.unice.polytech.citadelle.game.Character <|-- fr.unice.polytech.citadelle.characters_class.Bishop
fr.unice.polytech.citadelle.game.District <|-- fr.unice.polytech.citadelle.game.ColorDistrict
fr.unice.polytech.citadelle.game.Comparable <|.. fr.unice.polytech.citadelle.game.Player
fr.unice.polytech.citadelle.game.SpellDistrict <|-- fr.unice.polytech.citadelle.game.purple_districts.Library
fr.unice.polytech.citadelle.game.Character <|-- fr.unice.polytech.citadelle.characters_class.King
fr.unice.polytech.citadelle.game.Comparable <|.. fr.unice.polytech.citadelle.game.District
fr.unice.polytech.citadelle.game.BonusDistrict <|-- fr.unice.polytech.citadelle.game.purple_districts.DragonGate
fr.unice.polytech.citadelle.game.District <|-- fr.unice.polytech.citadelle.game.BonusDistrict
fr.unice.polytech.citadelle.game.BonusDistrict <|-- fr.unice.polytech.citadelle.game.purple_districts.University
fr.unice.polytech.citadelle.game.Character <|-- fr.unice.polytech.citadelle.characters_class.Warlord
fr.unice.polytech.citadelle.game.Character <|-- fr.unice.polytech.citadelle.characters_class.Thief
fr.unice.polytech.citadelle.game.SpellDistrict <|-- fr.unice.polytech.citadelle.game.purple_districts.Graveyard
fr.unice.polytech.citadelle.game.Character <|-- fr.unice.polytech.citadelle.characters_class.Assassin
fr.unice.polytech.citadelle.game.District <|-- fr.unice.polytech.citadelle.game.SpellDistrict
fr.unice.polytech.citadelle.game_interactor.Behaviour <|-- fr.unice.polytech.citadelle.game_interactor.NormalBot
fr.unice.polytech.citadelle.game.SpellDistrict <|-- fr.unice.polytech.citadelle.game.purple_districts.Laboratory
fr.unice.polytech.citadelle.game.Character <|-- fr.unice.polytech.citadelle.characters_class.Architect
fr.unice.polytech.citadelle.game.SpellDistrict <|-- fr.unice.polytech.citadelle.game.purple_districts.Smithy
fr.unice.polytech.citadelle.game.SpellDistrict <|-- fr.unice.polytech.citadelle.game.purple_districts.Observatory
fr.unice.polytech.citadelle.game.Character <|-- fr.unice.polytech.citadelle.characters_class.Merchant
fr.unice.polytech.citadelle.game.ColorDistrict <|-- fr.unice.polytech.citadelle.game.purple_districts.HauntedCity
fr.unice.polytech.citadelle.game.Character <|-- fr.unice.polytech.citadelle.characters_class.Magician
fr.unice.polytech.citadelle.game.ColorDistrict <|-- fr.unice.polytech.citadelle.game.purple_districts.SchoolOfMagic
fr.unice.polytech.citadelle.game_interactor.Behaviour <|-- fr.unice.polytech.citadelle.game_interactor.RushBot
fr.unice.polytech.citadelle.game.District <|-- fr.unice.polytech.citadelle.game.purple_districts.Keep
@enduml