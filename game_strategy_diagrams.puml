@startuml
class fr.unice.polytech.citadelle.game_interactor.game_strategy.Strategy {
~ Player player
~ Board board
~ Predict predict
~ int numberOfCharacter
+ <<Create>> Strategy(int,Board,Player)
+ <<Create>> Strategy(int,Board,Player,Predict)
+ int randomInt(int)
+ Character chooseCharacterForThiefRandom(LinkedHashMap<Character,Optional<Behaviour>>)
+ Character chooseCharacterForAssassinRandom(LinkedHashMap<Character,Optional<Behaviour>>)
+ Character chooseCharacterForMagicianRandom(LinkedHashMap<Character,Optional<Behaviour>>)
+ Player choosePlayerForWarlordRandom()
+ Player choosePlayerForWarlordAdvanced()
+ Character chooseCharacterForAssassinAdvanced()
+ Character chooseCharacterForThiefAdvanced()
+ Character chooseCharacterForMagicianAdvanced()
- Player findThePlayerWithMostCards()
+ Player findThePlayerWithMostGolds()
+ Player findThePlayerWithClosestScoreAssassin()
+ int warlordInterestScore(District,Player)
+ District chooseDistrictToDestroy(Player)
+ ArrayList<District> chooseMagicianActionForRandom()
+ ArrayList<District> chooseMagicianActionAdvanced()
- ArrayList<District> CardToBeSwapped()
- boolean isThereAPlayerWithTwoTimesHis()
+ int cityDistrictScore(Player)
+ int playerPredictScore(Player)
+ boolean hasFiveDistrictColors(Player)
+ int countNumberOfDistrictWithColor(Player,String)
+ String has3districtWithSameColour(Player)
+ Character getAPrediction(Player,ArrayList<Character>)
+ Predict getPredict()
+ Optional<Character> getCharacterOfPlayer(Player)
}
class fr.unice.polytech.citadelle.game_interactor.game_strategy.Predict {
~ Board board
+ <<Create>> Predict(Board)
+ Character predictWhoIsPlayer(Player,ArrayList<Character>)
- Optional<Character> checkAlreadyReveal(Player)
+ ArrayList<Character> allCharacters()
+ ArrayList<Character> targetableCharactersForPredictWhoIsPlayer(ArrayList<Character>)
- int goldsForPredictWhoIsPlayer(Player)
- ArrayList<District> handForPredictWhoIsPlayer(Player)
- ArrayList<District> cityForPredictWhoIsPlayer(Player)
+ ArrayList<Player> playersForPredictWhoIsPlayer(Player)
+ boolean canBeArchitect(Player,ArrayList<Character>)
+ boolean canBeBishop(Player,ArrayList<Character>)
+ boolean canBeKing(Player,ArrayList<Character>)
+ boolean canBeMerchant(Player,ArrayList<Character>)
+ boolean canBeThief(Player,ArrayList<Character>)
+ boolean canBeMagician(Player,ArrayList<Character>)
+ boolean canBeWarlord(Player,ArrayList<Character>)
+ Character listGetCharacter(int)
}
@enduml